# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: 'k8s-pool'
  demands:
  - maven

#stages:
 # - stage: 
  #  jobs:
   # - job: 
    #  steps:
     # - task: Docker@2
      #  inputs:
       #   containerRegistry: 'webgoat-dcr'
        #  repository: 'gameof-life-webapp'
         # command: 'buildAndPush'
          #Dockerfile: '**/Dockerfile'
          #ddPipelineData: false
          #dBaseImageData: false

stages:
  - stage: build
    jobs:
    - job: Build
      steps:
    
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
      - task: CopyFiles@2
        inputs:
          Contents: '**/target/gameoflife.war'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'demo'
          publishLocation: 'Container'

  - stage: Deployment
    dependsOn: Build
    jobs:
    - deployment: DeploymentJob
      environment: 
        name: 'Dev'
        resourceName: 'applruser Build service(aptnaidu8260265)'
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadPipelineArtifact@2
                displayName: "Download Build Artifacts"
                inputs:
                  buildType: 'current'
                  artifactName: 'groot-artifact'
                  path: '$(Pipeline.Workspace)/groot_artifact'

              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'svc-connection1'
                  appType: 'webAppLinux'
                  WebAppName: 'nikeorders'
                  packageForLinux: '$(Pipeline.Workspace)/groot_artifact/**/*.war'
                  RuntimeStack: 'JBOSSEAP|7-java8'